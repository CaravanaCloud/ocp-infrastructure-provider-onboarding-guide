{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome This site contains documentation about how to add a new infrastructure provider to the OpenShift platform. To begin learning about the process, please see the Overview .","title":"Welcome"},{"location":"#welcome","text":"This site contains documentation about how to add a new infrastructure provider to the OpenShift platform. To begin learning about the process, please see the Overview .","title":"Welcome"},{"location":"overview/","text":"Overview This document provides a high level view of the workflow for adding a new infrastructure provider to OpenShift. The following list is meant to give a general idea of the work involved with this process, the links contained within the list reference documents with greater detail for each step. Workflow Preparation Start with an idea to add a new infrastructure provider to OpenShift. Identify contacts within Red Hat, and the community, and then set expectations about the process ahead. Information Gathering Define the reference architecture and toplogy for OpenShift clusters on the new provider. Inventory existing components including licenses and plugin providers, and identify supported formats and infrastructure. OpenShift Enhancement Create an enhancment describing the new platform in detail, this will become a part of the official OpenShift enhancements . RHCOS Add support for the new platform to the Red Hat CoreOS Operating System. Installer New platforms should add support the OpenShift Installer, which users use to configure and build their OpenShift clusters. The Installer takes configuration and cloud credentials, validates the information, and builds the cloud infrastructure to create a cluster. Cloud Controller Manager New providers must have a Cloud Controller Manager integrated into OpenShift, including a repository in the OpenShift organization and container images included in the release payload. Container Storage Interface Driver Providers that expose storage options must have a CSI driver integrated into OpenShift, including a repository in the OpenShift organization and container images inclujded in the release payload. Machine API Controllers New providers must have a Machine actuator, and related controllers, for the Machine API Operator , including a repository in the OpenShift organization and container images included in the release payload. Network Ingress and DNS Evaluate provider-specific support for ingress load balancers and endpoint publishing strategies, as well as internal and external DNS support. Update and validate the Cluster Ingress Operator for the new infrastructure provider. Continuous Integration and Testing All components must have a suite of automation including unit style testing (run in isolation), and integration testing (run on cluster from the provider). This automation is part of the OpenShift development and release process, and exists within the OpenShift organization. Component Infrastructure Once OpenShift can be installed and operated on the new infrastructure platform attention should be given to the dynamic infrastructure services. These components are non-critical to the installation process and include things like the image registry. Documentation Product documentation is required for installation and maintenance tasks on the new infrastructure platform. Source level documentation is expected for all component repositories added to the OpenShift organization. Red Hat Relationship After the new infrastructure provider is ready for release, what are the commitments around maintenance and future releases. Release What to do once the code is approved and the release is ready for public consumption. How to promote and advertise, and work with Red Hat.","title":"Overview"},{"location":"overview/#overview","text":"This document provides a high level view of the workflow for adding a new infrastructure provider to OpenShift. The following list is meant to give a general idea of the work involved with this process, the links contained within the list reference documents with greater detail for each step.","title":"Overview"},{"location":"overview/#workflow","text":"Preparation Start with an idea to add a new infrastructure provider to OpenShift. Identify contacts within Red Hat, and the community, and then set expectations about the process ahead. Information Gathering Define the reference architecture and toplogy for OpenShift clusters on the new provider. Inventory existing components including licenses and plugin providers, and identify supported formats and infrastructure. OpenShift Enhancement Create an enhancment describing the new platform in detail, this will become a part of the official OpenShift enhancements . RHCOS Add support for the new platform to the Red Hat CoreOS Operating System. Installer New platforms should add support the OpenShift Installer, which users use to configure and build their OpenShift clusters. The Installer takes configuration and cloud credentials, validates the information, and builds the cloud infrastructure to create a cluster. Cloud Controller Manager New providers must have a Cloud Controller Manager integrated into OpenShift, including a repository in the OpenShift organization and container images included in the release payload. Container Storage Interface Driver Providers that expose storage options must have a CSI driver integrated into OpenShift, including a repository in the OpenShift organization and container images inclujded in the release payload. Machine API Controllers New providers must have a Machine actuator, and related controllers, for the Machine API Operator , including a repository in the OpenShift organization and container images included in the release payload. Network Ingress and DNS Evaluate provider-specific support for ingress load balancers and endpoint publishing strategies, as well as internal and external DNS support. Update and validate the Cluster Ingress Operator for the new infrastructure provider. Continuous Integration and Testing All components must have a suite of automation including unit style testing (run in isolation), and integration testing (run on cluster from the provider). This automation is part of the OpenShift development and release process, and exists within the OpenShift organization. Component Infrastructure Once OpenShift can be installed and operated on the new infrastructure platform attention should be given to the dynamic infrastructure services. These components are non-critical to the installation process and include things like the image registry. Documentation Product documentation is required for installation and maintenance tasks on the new infrastructure platform. Source level documentation is expected for all component repositories added to the OpenShift organization. Red Hat Relationship After the new infrastructure provider is ready for release, what are the commitments around maintenance and future releases. Release What to do once the code is approved and the release is ready for public consumption. How to promote and advertise, and work with Red Hat.","title":"Workflow"},{"location":"cloud-controller-manager/","text":"Cloud Controller Manager This document describes the necessary changes that must be made to add a new Cloud Controller Manager (CCM) to OpenShift. It does not cover the details of writing a CCM, for information about implementing the controller please see the official Kubernetes documentation on Developing Cloud Controller Manager as a starting point. Add the CCM repository to OpenShift One of the first things to do is copy the source code into the OpenShift organization on GitHub. This process is described in more detail in the Creating a GitHub Repository in the OpenShift Organization document. Having the source code in the OpenShift organization will allow Red Hat's continuous integration tooling access to it for running tests, building images, and including in the official releases. Configure basic repository integrations After the repository is copied to the OpenShift organization, there are a few basic continuous integration tasks that should be configured. The most important of these initially are the job to permit automated merging through Tide and the job to create container images on commits. OpenShift uses Prow for continuous integration testing much like the Kubernetes community does. The configurations are contained in the openshift/release repository. This is where pull requests will need to be made to enable integrations for the new CCM. For a deeper understanding of the OpenShift continuous integration tooling, the OpenShift CI Docs are the authoritative source. In specific for this initial task, the Bootstrapping Configuration for a new Repository should be used as a guide. As an example, here is the pull request to add the CCM for Alibaba Cloud to the OpenShift Prow. It configures the Tide mechanics as well as a pre-submit job to check the Go language formatting and a post-submit job to build the container images. openshift/release #19947 Integrating with other OpenShift components In OpenShift there are several operators which work together to ensure that the CCM is properly configured and also that new nodes which join the cluster are similarly configured for the infrastructure provider. To ensure that the new CCM and provider are properly recognized by all components there are several repositories which must be modified. openshift/api Before progressing with the OpenShift integrations, the new infrastructure provider will need to be present in the OpenShift API as part of the infrastructure.config.openshift.io definition. TODO: add link to installer doc step that describes updating openshift/api openshift/library-go In order for the new infrastructure provider to be recognized by the Cluster Cloud Controller Manager Operator, and other operators, the OpenShift library-go project must be updated so that the IsCloudProviderExternal function returns the proper response. As an example, here is the pull request to update the IsCloudProviderExternal function to add support for IBM Cloud. openshift/library-go #1161 It is important to note that any changes to library-go must be vendored into the projects which are dependent upon library-go. This process can often involve several repositories that must be updated before all the components will work together. To make tracking these changes easier, an issue can be used to monitor the individual changes. For example, this is an issue which tracked changes for the GCP and vSphere updates: openshift/cluster-cloud-controller-manager-operator #135 openshift/cluster-cloud-controller-manager-operator OpenShift uses the Cluster Cloud Controller Manager Operator (CCCMO) to manage the deployment and maintenance of the CCMs. This operator will deploy the individual containers of the CCM and ensure their health and continued operation during the cluster lifecycle. Adding a new infrastructure provider will require creating a package within the CCCMO that will contain the code for deploying the new components as well as the templated manifests for them. For a deeper discussion of integrating with the CCCMO, please see the developer documenation from that repository. As an example, here are two pull requests that added the IBM Cloud CCM to the CCCMO. The first pull request adds the primary code changes and manifests for deployment. The second pull request adds the CCM image references for the CCCMO to utilize when deploying from an OpenShift release payload. openshift/cluster-cloud-controller-manager-operator #97 openshift/cluster-cloud-controller-manager-operator #105","title":"Cloud Controller Manager"},{"location":"cloud-controller-manager/#cloud-controller-manager","text":"This document describes the necessary changes that must be made to add a new Cloud Controller Manager (CCM) to OpenShift. It does not cover the details of writing a CCM, for information about implementing the controller please see the official Kubernetes documentation on Developing Cloud Controller Manager as a starting point.","title":"Cloud Controller Manager"},{"location":"cloud-controller-manager/#add-the-ccm-repository-to-openshift","text":"One of the first things to do is copy the source code into the OpenShift organization on GitHub. This process is described in more detail in the Creating a GitHub Repository in the OpenShift Organization document. Having the source code in the OpenShift organization will allow Red Hat's continuous integration tooling access to it for running tests, building images, and including in the official releases.","title":"Add the CCM repository to OpenShift"},{"location":"cloud-controller-manager/#configure-basic-repository-integrations","text":"After the repository is copied to the OpenShift organization, there are a few basic continuous integration tasks that should be configured. The most important of these initially are the job to permit automated merging through Tide and the job to create container images on commits. OpenShift uses Prow for continuous integration testing much like the Kubernetes community does. The configurations are contained in the openshift/release repository. This is where pull requests will need to be made to enable integrations for the new CCM. For a deeper understanding of the OpenShift continuous integration tooling, the OpenShift CI Docs are the authoritative source. In specific for this initial task, the Bootstrapping Configuration for a new Repository should be used as a guide. As an example, here is the pull request to add the CCM for Alibaba Cloud to the OpenShift Prow. It configures the Tide mechanics as well as a pre-submit job to check the Go language formatting and a post-submit job to build the container images. openshift/release #19947","title":"Configure basic repository integrations"},{"location":"cloud-controller-manager/#integrating-with-other-openshift-components","text":"In OpenShift there are several operators which work together to ensure that the CCM is properly configured and also that new nodes which join the cluster are similarly configured for the infrastructure provider. To ensure that the new CCM and provider are properly recognized by all components there are several repositories which must be modified.","title":"Integrating with other OpenShift components"},{"location":"cloud-controller-manager/#openshiftapi","text":"Before progressing with the OpenShift integrations, the new infrastructure provider will need to be present in the OpenShift API as part of the infrastructure.config.openshift.io definition. TODO: add link to installer doc step that describes updating openshift/api","title":"openshift/api"},{"location":"cloud-controller-manager/#openshiftlibrary-go","text":"In order for the new infrastructure provider to be recognized by the Cluster Cloud Controller Manager Operator, and other operators, the OpenShift library-go project must be updated so that the IsCloudProviderExternal function returns the proper response. As an example, here is the pull request to update the IsCloudProviderExternal function to add support for IBM Cloud. openshift/library-go #1161 It is important to note that any changes to library-go must be vendored into the projects which are dependent upon library-go. This process can often involve several repositories that must be updated before all the components will work together. To make tracking these changes easier, an issue can be used to monitor the individual changes. For example, this is an issue which tracked changes for the GCP and vSphere updates: openshift/cluster-cloud-controller-manager-operator #135","title":"openshift/library-go"},{"location":"cloud-controller-manager/#openshiftcluster-cloud-controller-manager-operator","text":"OpenShift uses the Cluster Cloud Controller Manager Operator (CCCMO) to manage the deployment and maintenance of the CCMs. This operator will deploy the individual containers of the CCM and ensure their health and continued operation during the cluster lifecycle. Adding a new infrastructure provider will require creating a package within the CCCMO that will contain the code for deploying the new components as well as the templated manifests for them. For a deeper discussion of integrating with the CCCMO, please see the developer documenation from that repository. As an example, here are two pull requests that added the IBM Cloud CCM to the CCCMO. The first pull request adds the primary code changes and manifests for deployment. The second pull request adds the CCM image references for the CCCMO to utilize when deploying from an OpenShift release payload. openshift/cluster-cloud-controller-manager-operator #97 openshift/cluster-cloud-controller-manager-operator #105","title":"openshift/cluster-cloud-controller-manager-operator"},{"location":"component-infrastructure/","text":"Component Infrastructure TODO","title":"Component Infrastructure"},{"location":"component-infrastructure/#component-infrastructure","text":"TODO","title":"Component Infrastructure"},{"location":"container-storage-interface-driver/","text":"Container Storage Interface Driver TODO","title":"Container Storage Interface Driver"},{"location":"container-storage-interface-driver/#container-storage-interface-driver","text":"TODO","title":"Container Storage Interface Driver"},{"location":"continuous-integration-and-testing/","text":"Continuous Integration and Testing TODO","title":"Continuous Integration"},{"location":"continuous-integration-and-testing/#continuous-integration-and-testing","text":"TODO","title":"Continuous Integration and Testing"},{"location":"documentation/","text":"Documentation TODO","title":"Documentation"},{"location":"documentation/#documentation","text":"TODO","title":"Documentation"},{"location":"information-gathering/","text":"Information Gathering TODO","title":"Information Gathering"},{"location":"information-gathering/#information-gathering","text":"TODO","title":"Information Gathering"},{"location":"installer/","text":"Installer TODO","title":"Installer"},{"location":"installer/#installer","text":"TODO","title":"Installer"},{"location":"machine-api-controllers/","text":"Machine API Controllers TODO","title":"Machine API Controllers"},{"location":"machine-api-controllers/#machine-api-controllers","text":"TODO","title":"Machine API Controllers"},{"location":"network-ingress-dns/","text":"Network Ingress and DNS Network Ingress Ensure the cloud provider implementation has support for load balancers If OpenShift should manage load balancers for this platform, the cloud provider needs to implement the cloudprovider.LoadBalancer interface . Then the ingress operator needs to be updated to configure a load balancer service on this platform. For example: - add provider-specific annotations to InternalLBAnnotations and managedLoadBalancerServiceAnnotations - evaluate customizations needed for load balancer service configuration in desiredLoadBalancerService - add unit tests to catch regressions Evaluate ingress provider-specific support for load balancers Review the end-to-end tests in the operator tests and make customizations, or skip the tests for this provider if they don't apply. For example: - see TestProxyProtocolOnAWS for an example for the AWS cloud provider - check if you require TestInternalLoadBalancer , TestIngressControllerCustomEndpoints , TestLocalWithFallbackOverrideForLoadBalancerService for your platform - add unit tests to catch regressions Evaluate provider-specific endpoint publishing strategy Look through the doc at the custom resource definition to understand the details for endpointPublishingStrategy , which is the set of parameters used to publish the ingress controller endpoints to other networks, enable load balancer integrations, and other tasks. Understand the properties: - hostNetwork, loadBalancerService, nodePortService, private Check if customizations are needed in the ingress controller operator For example: - add your default strategy to setDefaultPublishingStrategy - add your integration for IsProxyProtocolNeeded - add unit tests to catch regressions Document the default endpoint publishing strategy for the provider DNS Evaluate provider-specific DNS support and validate the controller Check if customizations are needed in the ingress operator's DNS controller . For example: - define a new DNS provider - add your platform type to createDNSProvider , and createDNSProviderIfNeeded - add unit tests to catch regressions Evaluate provider-specific externalDNS support (4.10+) Starting in OpenShift 4.10, there is the External-DNS operator to consider. It will support only these platforms in 4.10: - AWS - GCP - Azure Questions Questions can be directed to the OpenShift Slack channel #forum-network-edge","title":"Network Ingress and DNS"},{"location":"network-ingress-dns/#network-ingress-and-dns","text":"","title":"Network Ingress and DNS"},{"location":"network-ingress-dns/#network-ingress","text":"","title":"Network Ingress"},{"location":"network-ingress-dns/#ensure-the-cloud-provider-implementation-has-support-for-load-balancers","text":"If OpenShift should manage load balancers for this platform, the cloud provider needs to implement the cloudprovider.LoadBalancer interface . Then the ingress operator needs to be updated to configure a load balancer service on this platform. For example: - add provider-specific annotations to InternalLBAnnotations and managedLoadBalancerServiceAnnotations - evaluate customizations needed for load balancer service configuration in desiredLoadBalancerService - add unit tests to catch regressions","title":"Ensure the cloud provider implementation has support for load balancers"},{"location":"network-ingress-dns/#evaluate-ingress-provider-specific-support-for-load-balancers","text":"Review the end-to-end tests in the operator tests and make customizations, or skip the tests for this provider if they don't apply. For example: - see TestProxyProtocolOnAWS for an example for the AWS cloud provider - check if you require TestInternalLoadBalancer , TestIngressControllerCustomEndpoints , TestLocalWithFallbackOverrideForLoadBalancerService for your platform - add unit tests to catch regressions","title":"Evaluate ingress provider-specific support for load balancers"},{"location":"network-ingress-dns/#evaluate-provider-specific-endpoint-publishing-strategy","text":"Look through the doc at the custom resource definition to understand the details for endpointPublishingStrategy , which is the set of parameters used to publish the ingress controller endpoints to other networks, enable load balancer integrations, and other tasks. Understand the properties: - hostNetwork, loadBalancerService, nodePortService, private Check if customizations are needed in the ingress controller operator For example: - add your default strategy to setDefaultPublishingStrategy - add your integration for IsProxyProtocolNeeded - add unit tests to catch regressions","title":"Evaluate provider-specific endpoint publishing strategy"},{"location":"network-ingress-dns/#document-the-default-endpoint-publishing-strategy-for-the-provider","text":"","title":"Document the default endpoint publishing strategy for the provider"},{"location":"network-ingress-dns/#dns","text":"","title":"DNS"},{"location":"network-ingress-dns/#evaluate-provider-specific-dns-support-and-validate-the-controller","text":"Check if customizations are needed in the ingress operator's DNS controller . For example: - define a new DNS provider - add your platform type to createDNSProvider , and createDNSProviderIfNeeded - add unit tests to catch regressions","title":"Evaluate provider-specific DNS support and validate the controller"},{"location":"network-ingress-dns/#evaluate-provider-specific-externaldns-support-410","text":"Starting in OpenShift 4.10, there is the External-DNS operator to consider. It will support only these platforms in 4.10: - AWS - GCP - Azure","title":"Evaluate provider-specific externalDNS support (4.10+)"},{"location":"network-ingress-dns/#questions","text":"Questions can be directed to the OpenShift Slack channel #forum-network-edge","title":"Questions"},{"location":"openshift-enhancement/","text":"OpenShift Enhancement Inspired by the Kubernetes community enhancement process, OpenShift also uses enhancements to drive and define its features. Early in the process of adding a new infrastructure provider to OpenShift, an enhancement document should be created to scope the work that is being done and to expose design details which might need modification on OpenShift. To begin, visit the OpenShift enhancements repository and become familiar with the enhancement template as well as the enhancement guidelines . When ready, create a pull request with your new infrastructure provider enhancement to the repository. To aid in this process, here are two examples of pull requests for recently added platforms: Alibaba Cloud platform enhancement pull request IBM Cloud platform enhancement pull request Writing the enhancement The enhancement template should guide you in organizing the text of your enhancement. But, it has been designed primarily for feature and code changes to OpenShift, so there are a few topics you should consider specifically while writing. What will an OpenShift cluster look like on the new infrastructure provider? (Adding a topology diagram can be very helpful to explain the logical architecture.) Are there special networking considerations that need to be explained (e.g. DNS and load balancing strategies)? What types of compute and storage are available on the infrastructure? How will users install and consume OpenShift on the infrastructure? The \"Drawbacks\" and \"Alternatives\" sections in the enhancement do not always make sense for new infrastructure providers. Depending on the options available for deploying OpenShift on the infrastructure, the \"Alternatives\" section can be a good place to talk about other methods of deployment.","title":"OpenShift Enhancement"},{"location":"openshift-enhancement/#openshift-enhancement","text":"Inspired by the Kubernetes community enhancement process, OpenShift also uses enhancements to drive and define its features. Early in the process of adding a new infrastructure provider to OpenShift, an enhancement document should be created to scope the work that is being done and to expose design details which might need modification on OpenShift. To begin, visit the OpenShift enhancements repository and become familiar with the enhancement template as well as the enhancement guidelines . When ready, create a pull request with your new infrastructure provider enhancement to the repository. To aid in this process, here are two examples of pull requests for recently added platforms: Alibaba Cloud platform enhancement pull request IBM Cloud platform enhancement pull request","title":"OpenShift Enhancement"},{"location":"openshift-enhancement/#writing-the-enhancement","text":"The enhancement template should guide you in organizing the text of your enhancement. But, it has been designed primarily for feature and code changes to OpenShift, so there are a few topics you should consider specifically while writing. What will an OpenShift cluster look like on the new infrastructure provider? (Adding a topology diagram can be very helpful to explain the logical architecture.) Are there special networking considerations that need to be explained (e.g. DNS and load balancing strategies)? What types of compute and storage are available on the infrastructure? How will users install and consume OpenShift on the infrastructure? The \"Drawbacks\" and \"Alternatives\" sections in the enhancement do not always make sense for new infrastructure providers. Depending on the options available for deploying OpenShift on the infrastructure, the \"Alternatives\" section can be a good place to talk about other methods of deployment.","title":"Writing the enhancement"},{"location":"preparation/","text":"Preparation Welcome, this documentation describes the engineering related processes for adding a new infrastructure provider to the OpenShift Container Platform. If you are reading this, then you are most likely either planning to create a new provider or are in the process of implementing your provider for OpenShift. This documentation is intended to address the engineering-specific issues related to the process, if you have questions about other aspects of this process (e.g. legal, marketing, etc.) then you should reach out to your Red Hat representatives with those questions. Starting the process To begin, read through this documentation making note of the various components that will need to be configured for OpenShift. You will need to assess how your infrastructure meets the various requirements of OpenShift, and identify where gaps in feature coverage might exist. If you are creating an infrastructure provider that will be included with OpenShift Container Platform then you should already have a representative from Red Hat who will be your primary contact for questions and help with this process. If you have not contacted Red Het yet, please reach out through this Red Hat Partner Connect page for more information.","title":"Preparation"},{"location":"preparation/#preparation","text":"Welcome, this documentation describes the engineering related processes for adding a new infrastructure provider to the OpenShift Container Platform. If you are reading this, then you are most likely either planning to create a new provider or are in the process of implementing your provider for OpenShift. This documentation is intended to address the engineering-specific issues related to the process, if you have questions about other aspects of this process (e.g. legal, marketing, etc.) then you should reach out to your Red Hat representatives with those questions.","title":"Preparation"},{"location":"preparation/#starting-the-process","text":"To begin, read through this documentation making note of the various components that will need to be configured for OpenShift. You will need to assess how your infrastructure meets the various requirements of OpenShift, and identify where gaps in feature coverage might exist. If you are creating an infrastructure provider that will be included with OpenShift Container Platform then you should already have a representative from Red Hat who will be your primary contact for questions and help with this process. If you have not contacted Red Het yet, please reach out through this Red Hat Partner Connect page for more information.","title":"Starting the process"},{"location":"procedures/creating-an-openshift-repository/","text":"Creating a GitHub Repository in the OpenShift Organization A common task when adding a new component to OpenShift is creating a GitHub repository in the OpenShift organization . This is where all the code that becomes part of an OpenShift release lives. To accomplish creating a new repository, a Red Hat representative will need to make a Jira request on the internal DPP Board . For infrastructure implementors: Contact your Red Hat representative about creating a new repository. Have the name, description, and license information for the new repository ready to share. If you would like to have the repository forked from an existing repository let your contact know this at the beginning of the process. For Red Hat representatives: Create a new Jira Request on the DPP Board , the following is an example request for the GCP CCM: Repository name: cloud-provider-gcp Description: Kubernetes Cloud Controller Manager for Google Cloud Platform Programming Language (for .gitignore - optional): go License: Apache License 2.0 Public repo: Public Who needs write access: OpenShift Team Cloud(https://github.com/orgs/openshift/teams/openshift-team-cloud) Read access: Everybody Additional info: Please fork https://github.com/kubernetes/cloud-provider-gcp there.","title":"Creating a GitHub Repository in the OpenShift Organization"},{"location":"procedures/creating-an-openshift-repository/#creating-a-github-repository-in-the-openshift-organization","text":"A common task when adding a new component to OpenShift is creating a GitHub repository in the OpenShift organization . This is where all the code that becomes part of an OpenShift release lives. To accomplish creating a new repository, a Red Hat representative will need to make a Jira request on the internal DPP Board . For infrastructure implementors: Contact your Red Hat representative about creating a new repository. Have the name, description, and license information for the new repository ready to share. If you would like to have the repository forked from an existing repository let your contact know this at the beginning of the process. For Red Hat representatives: Create a new Jira Request on the DPP Board , the following is an example request for the GCP CCM: Repository name: cloud-provider-gcp Description: Kubernetes Cloud Controller Manager for Google Cloud Platform Programming Language (for .gitignore - optional): go License: Apache License 2.0 Public repo: Public Who needs write access: OpenShift Team Cloud(https://github.com/orgs/openshift/teams/openshift-team-cloud) Read access: Everybody Additional info: Please fork https://github.com/kubernetes/cloud-provider-gcp there.","title":"Creating a GitHub Repository in the OpenShift Organization"},{"location":"red-hat-relationship/","text":"Red Hat Relationship TODO","title":"Red Hat Relationship"},{"location":"red-hat-relationship/#red-hat-relationship","text":"TODO","title":"Red Hat Relationship"},{"location":"release/","text":"Release TODO","title":"Release"},{"location":"release/#release","text":"TODO","title":"Release"},{"location":"rhcos/","text":"RHCOS TODO","title":"RHCOS"},{"location":"rhcos/#rhcos","text":"TODO","title":"RHCOS"}]}