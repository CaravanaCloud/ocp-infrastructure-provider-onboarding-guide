{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome This site contains documentation about how to add a new infrastructure provider to the OpenShift platform. To begin learning about the process, please see the Overview .","title":"Welcome"},{"location":"#welcome","text":"This site contains documentation about how to add a new infrastructure provider to the OpenShift platform. To begin learning about the process, please see the Overview .","title":"Welcome"},{"location":"overview/","text":"Overview This document provides a high level view of the workflow for adding a new infrastructure provider to OpenShift. The following list is meant to give a general idea of the work involved with this process, the links contained within the list reference documents with greater detail for each step. Workflow Preparation Start with an idea to add a new infrastructure provider to OpenShift. Identify contacts within Red Hat, and the community, and then set expectations about the process ahead. Information Gathering Define the reference architecture and toplogy for OpenShift clusters on the new provider. Inventory existing components including licenses and plugin providers, and identify supported formats and infrastructure. OpenShift Enhancement Create an enhancment describing the new platform in detail, this will become a part of the official OpenShift enhancements . Cloud Controller Manager New providers must have a Cloud Controller Manager integrated into OpenShift, including a repository in the OpenShift organization and container images included in the release payload. Container Storage Interface Driver Providers that expose storage options must have a CSI driver integrated into OpenShift, including a repository in the OpenShift organization and container images inclujded in the release payload. Machine API Controllers New providers must have a Machine actuator, and related controllers, for the Machine API Operator , including a repository in the OpenShift organization and container images included in the release payload. Network Ingress and DNS Evaluate provider-specific support for ingress load balancers and endpoint publishing strategies, as well as internal and external DNS support. Update and validate the Cluster Ingress Operator for the new infrastructure provider. Continuous Integration and Testing All components must have a suite of automation including unit style testing (run in isolation), and integration testing (run on cluster from the provider). This automation is part of the OpenShift development and release process, and exists within the OpenShift organization. Component Infrastructure Once OpenShift can be installed and operated on the new infrastructure platform attention should be given to the dynamic infrastructure services. These components are non-critical to the installation process and include things like the image registry. Documentation Product documentation is required for installation and maintenance tasks on the new infrastructure platform. Source level documentation is expected for all component repositories added to the OpenShift organization. Red Hat Relationship After the new infrastructure provider is ready for release, what are the commitments around maintenance and future releases. Release What to do once the code is approved and the release is ready for public consumption. How to promote and advertise, and work with Red Hat.","title":"Overview"},{"location":"overview/#overview","text":"This document provides a high level view of the workflow for adding a new infrastructure provider to OpenShift. The following list is meant to give a general idea of the work involved with this process, the links contained within the list reference documents with greater detail for each step.","title":"Overview"},{"location":"overview/#workflow","text":"Preparation Start with an idea to add a new infrastructure provider to OpenShift. Identify contacts within Red Hat, and the community, and then set expectations about the process ahead. Information Gathering Define the reference architecture and toplogy for OpenShift clusters on the new provider. Inventory existing components including licenses and plugin providers, and identify supported formats and infrastructure. OpenShift Enhancement Create an enhancment describing the new platform in detail, this will become a part of the official OpenShift enhancements . Cloud Controller Manager New providers must have a Cloud Controller Manager integrated into OpenShift, including a repository in the OpenShift organization and container images included in the release payload. Container Storage Interface Driver Providers that expose storage options must have a CSI driver integrated into OpenShift, including a repository in the OpenShift organization and container images inclujded in the release payload. Machine API Controllers New providers must have a Machine actuator, and related controllers, for the Machine API Operator , including a repository in the OpenShift organization and container images included in the release payload. Network Ingress and DNS Evaluate provider-specific support for ingress load balancers and endpoint publishing strategies, as well as internal and external DNS support. Update and validate the Cluster Ingress Operator for the new infrastructure provider. Continuous Integration and Testing All components must have a suite of automation including unit style testing (run in isolation), and integration testing (run on cluster from the provider). This automation is part of the OpenShift development and release process, and exists within the OpenShift organization. Component Infrastructure Once OpenShift can be installed and operated on the new infrastructure platform attention should be given to the dynamic infrastructure services. These components are non-critical to the installation process and include things like the image registry. Documentation Product documentation is required for installation and maintenance tasks on the new infrastructure platform. Source level documentation is expected for all component repositories added to the OpenShift organization. Red Hat Relationship After the new infrastructure provider is ready for release, what are the commitments around maintenance and future releases. Release What to do once the code is approved and the release is ready for public consumption. How to promote and advertise, and work with Red Hat.","title":"Workflow"},{"location":"cloud-controller-manager/","text":"Cloud Controller Manager TODO","title":"Cloud Controller Manager"},{"location":"cloud-controller-manager/#cloud-controller-manager","text":"TODO","title":"Cloud Controller Manager"},{"location":"component-infrastructure/","text":"Component Infrastructure TODO","title":"Component Infrastructure"},{"location":"component-infrastructure/#component-infrastructure","text":"TODO","title":"Component Infrastructure"},{"location":"container-storage-interface-driver/","text":"Container Storage Interface Driver TODO","title":"Container Storage Interface Driver"},{"location":"container-storage-interface-driver/#container-storage-interface-driver","text":"TODO","title":"Container Storage Interface Driver"},{"location":"continuous-integration-and-testing/","text":"Continuous Integration and Testing TODO","title":"Continuous Integration"},{"location":"continuous-integration-and-testing/#continuous-integration-and-testing","text":"TODO","title":"Continuous Integration and Testing"},{"location":"documentation/","text":"Documentation TODO","title":"Documentation"},{"location":"documentation/#documentation","text":"TODO","title":"Documentation"},{"location":"information-gathering/","text":"Information Gathering TODO","title":"Information Gathering"},{"location":"information-gathering/#information-gathering","text":"TODO","title":"Information Gathering"},{"location":"machine-api-controllers/","text":"Machine API Controllers TODO","title":"Machine API Controllers"},{"location":"machine-api-controllers/#machine-api-controllers","text":"TODO","title":"Machine API Controllers"},{"location":"network-ingress-dns/","text":"Network Ingress and DNS Network Ingress Ensure the cloud provider implementation has support for load balancers If OpenShift should manage load balancers for this platform, provide load balancer integration in the load balancer service For example: - add provider-specific annotations to InternalLBAnnotations and managedLoadBalancerServiceAnnotations - evaluate customizations needed for load balancer service configuration in desiredLoadBalancerService - add unit tests to catch regressions Evaluate ingress provider-specific support for load balancers Review the end-to-end tests in the operator tests and make customizations, or skip the tests for this provider if they don't apply. For example: - see TestProxyProtocolOnAWS for an example for the AWS cloud provider - check if you require TestInternalLoadBalancer , TestIngressControllerCustomEndpoints , TestLocalWithFallbackOverrideForLoadBalancerService for your platform - add unit tests to catch regressions Evaluate provider-specific endpoint publishing strategy Look through the doc at the custom resource definition to understand the details for endpointPublishingStrategy , which is the set of parameters used to publish the ingress controller endpoints to other networks, enable load balancer integrations, and other tasks. Understand the properties: - hostNetwork, loadBalancerService, nodePortService, private Check if customizations are needed in the ingress controller operator For example: - add your default strategy to setDefaultPublishingStrategy - add your integration for IsProxyProtocolNeeded - add unit tests to catch regressions Document the default endpoint publishing strategy for the provider DNS Evaluate provider-specific DNS support and validate the controller Check if customizations are needed in the DNS operator For example: - add your platform type to createDNSProvider , and createDNSProviderIfNeeded - add unit tests to catch regressions Evaluate provider-specific externalDNS support (4.10+) Starting in OpenShift 4.10, there is the External-DNS operator to consider. It will support only these platforms in 4.10: - AWS - GCP - Azure Questions Questions can be directed to the OpenShift Slack channel #forum-network-edge","title":"Network Ingress and DNS"},{"location":"network-ingress-dns/#network-ingress-and-dns","text":"","title":"Network Ingress and DNS"},{"location":"network-ingress-dns/#network-ingress","text":"","title":"Network Ingress"},{"location":"network-ingress-dns/#ensure-the-cloud-provider-implementation-has-support-for-load-balancers","text":"If OpenShift should manage load balancers for this platform, provide load balancer integration in the load balancer service For example: - add provider-specific annotations to InternalLBAnnotations and managedLoadBalancerServiceAnnotations - evaluate customizations needed for load balancer service configuration in desiredLoadBalancerService - add unit tests to catch regressions","title":"Ensure the cloud provider implementation has support for load balancers"},{"location":"network-ingress-dns/#evaluate-ingress-provider-specific-support-for-load-balancers","text":"Review the end-to-end tests in the operator tests and make customizations, or skip the tests for this provider if they don't apply. For example: - see TestProxyProtocolOnAWS for an example for the AWS cloud provider - check if you require TestInternalLoadBalancer , TestIngressControllerCustomEndpoints , TestLocalWithFallbackOverrideForLoadBalancerService for your platform - add unit tests to catch regressions","title":"Evaluate ingress provider-specific support for load balancers"},{"location":"network-ingress-dns/#evaluate-provider-specific-endpoint-publishing-strategy","text":"Look through the doc at the custom resource definition to understand the details for endpointPublishingStrategy , which is the set of parameters used to publish the ingress controller endpoints to other networks, enable load balancer integrations, and other tasks. Understand the properties: - hostNetwork, loadBalancerService, nodePortService, private Check if customizations are needed in the ingress controller operator For example: - add your default strategy to setDefaultPublishingStrategy - add your integration for IsProxyProtocolNeeded - add unit tests to catch regressions","title":"Evaluate provider-specific endpoint publishing strategy"},{"location":"network-ingress-dns/#document-the-default-endpoint-publishing-strategy-for-the-provider","text":"","title":"Document the default endpoint publishing strategy for the provider"},{"location":"network-ingress-dns/#dns","text":"","title":"DNS"},{"location":"network-ingress-dns/#evaluate-provider-specific-dns-support-and-validate-the-controller","text":"Check if customizations are needed in the DNS operator For example: - add your platform type to createDNSProvider , and createDNSProviderIfNeeded - add unit tests to catch regressions","title":"Evaluate provider-specific DNS support and validate the controller"},{"location":"network-ingress-dns/#evaluate-provider-specific-externaldns-support-410","text":"Starting in OpenShift 4.10, there is the External-DNS operator to consider. It will support only these platforms in 4.10: - AWS - GCP - Azure","title":"Evaluate provider-specific externalDNS support (4.10+)"},{"location":"network-ingress-dns/#questions","text":"Questions can be directed to the OpenShift Slack channel #forum-network-edge","title":"Questions"},{"location":"openshift-enhancement/","text":"OpenShift Enhancement TODO","title":"OpenShift Enhancement"},{"location":"openshift-enhancement/#openshift-enhancement","text":"TODO","title":"OpenShift Enhancement"},{"location":"preparation/","text":"Preparation TODO","title":"Preparation"},{"location":"preparation/#preparation","text":"TODO","title":"Preparation"},{"location":"procedures/creating-an-openshift-repository/","text":"Creating a GitHub Repository in the OpenShift Organization A common task when adding a new component to OpenShift is creating a GitHub repository in the OpenShift organization . This is where all the code that becomes part of an OpenShift release lives. To accomplish creating a new repository, a Red Hat representative will need to make a Jira request on the internal DPP Board . For infrastructure implementors: 1. Contact your Red Hat representative about creating a new repository. 1. Have the name, description, and license information for the new repository ready to share. 1. If you would like to have the repository forked from an existing repository let your contact know this at the beginning of the process. For Red Hat representatives: 1. Create a new Jira Request on the DPP Board , the following is an example request for the GCP CCM: Repository name: cloud-provider-gcp Description: Kubernetes Cloud Controller Manager for Google Cloud Platform Programming Language (for .gitignore - optional): go License: Apache License 2.0 Public repo: Public Who needs write access: OpenShift Team Cloud(https://github.com/orgs/openshift/teams/openshift-team-cloud) Read access: Everybody Additional info: Please fork https://github.com/kubernetes/cloud-provider-gcp there.","title":"Creating a GitHub Repository in the OpenShift Organization"},{"location":"procedures/creating-an-openshift-repository/#creating-a-github-repository-in-the-openshift-organization","text":"A common task when adding a new component to OpenShift is creating a GitHub repository in the OpenShift organization . This is where all the code that becomes part of an OpenShift release lives. To accomplish creating a new repository, a Red Hat representative will need to make a Jira request on the internal DPP Board . For infrastructure implementors: 1. Contact your Red Hat representative about creating a new repository. 1. Have the name, description, and license information for the new repository ready to share. 1. If you would like to have the repository forked from an existing repository let your contact know this at the beginning of the process. For Red Hat representatives: 1. Create a new Jira Request on the DPP Board , the following is an example request for the GCP CCM: Repository name: cloud-provider-gcp Description: Kubernetes Cloud Controller Manager for Google Cloud Platform Programming Language (for .gitignore - optional): go License: Apache License 2.0 Public repo: Public Who needs write access: OpenShift Team Cloud(https://github.com/orgs/openshift/teams/openshift-team-cloud) Read access: Everybody Additional info: Please fork https://github.com/kubernetes/cloud-provider-gcp there.","title":"Creating a GitHub Repository in the OpenShift Organization"},{"location":"red-hat-relationship/","text":"Red Hat Relationship TODO","title":"Red Hat Relationship"},{"location":"red-hat-relationship/#red-hat-relationship","text":"TODO","title":"Red Hat Relationship"},{"location":"release/","text":"Release TODO","title":"Release"},{"location":"release/#release","text":"TODO","title":"Release"}]}